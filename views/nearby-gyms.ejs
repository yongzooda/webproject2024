<!-- 페이지 전용 스타일 -->
<!-- 상단바 스타일은 main.ejs에서 관리 -->
<style>
  main {
    display: flex;
    width: 100%;
    margin: 0;
    padding: 0; /* 공백 제거 */
    height: calc(100vh - 60px); /* 상단바 높이를 제외한 높이 설정 */
    overflow: hidden; /* main 자체 스크롤 제거 */
  }

  #gym-list {
    flex: 0 0 40%; /* 헬스장 목록 영역 너비 */
    height: 100%; /* main 높이 상속 */
    overflow-y: auto; /* 헬스장 목록 스크롤 */
    background: #f9f9f9;
    padding: 1rem;
    border-right: 1px solid #ddd;
  }

  .gym-card {
    background-color: #ffffff;
    color: #333;
    margin-bottom: 1rem;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s, background-color 0.3s;
  }

  .gym-card:hover {
    transform: scale(1.05);
    background-color: #e6f7ff;
  }

  .gym-card h2 {
    font-size: 1rem;
    margin-bottom: 0.5rem;
    color: #007bff;
    font-weight: bold;
  }

  .gym-card p {
    font-size: 0.9rem;
    margin: 0.2rem 0;
    color: #555;
  }

  #map {
    flex: 0 0 60%; /* 지도 영역 너비 */
    height: 100%; /* main 높이 상속 */
  }
</style>

<main>
  <!-- 페이지 콘텐츠 -->
  <div id="gym-list"></div>
  <div id="map"></div>
</main>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCR_YT9dN3ei0ZBsiui-9UX8Vj6POVYEHQ&callback=initMap"
async
defer></script>
    <script>
      let map;
      let userLocation;

      function initMap() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              userLocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              };

              map = new google.maps.Map(document.getElementById('map'), {
                zoom: 14,
                center: userLocation,
              });

              new google.maps.Marker({
                position: userLocation,
                map: map,
                title: 'Your Location',
                icon: {
                  url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                },
              });

              new google.maps.Circle({
                map: map,
                center: userLocation,
                radius: 5000,
                fillColor: '#007bff',
                fillOpacity: 0.1,
                strokeColor: '#007bff',
                strokeOpacity: 0.5,
              });

              fetchNearbyGyms(userLocation);
            },
            (error) => {
              console.error('Geolocation error:', error);
              alert('Location access denied. Showing default location.');
            }
          );
        } else {
          alert('Geolocation is not supported by this browser.');
        }
      }

      async function fetchNearbyGyms(location) {
        const { lat, lng } = location;
        const requestUrl = `/home/api/nearby-gyms?lat=${lat}&lng=${lng}`;
        const response = await fetch(requestUrl);
        const data = await response.json();

        // 거리 계산 및 정렬
        data.forEach((gym) => {
          if (gym.geometry && gym.geometry.location) {
            gym.distance = calculateDistance(location, {
              lat: gym.geometry.location.lat,
              lng: gym.geometry.location.lng,
            });
          } else {
            gym.distance = Infinity; // 위치 정보가 없으면 무한대로 설정
          }
        });

        // 평점(내림차순), 거리(오름차순) 기준으로 정렬
        data.sort((a, b) => {
          const ratingDiff = (b.rating || 0) - (a.rating || 0);
          if (ratingDiff !== 0) return ratingDiff; // 평점 우선 정렬
          return a.distance - b.distance; // 평점이 같으면 거리 기준 정렬
        });

        displayGyms(data);
        addMarkersToMap(data);
      }

      function calculateDistance(loc1, loc2) {
        const toRad = (value) => (value * Math.PI) / 180;
        const R = 6371; // 지구 반지름 (km)
        const dLat = toRad(loc2.lat - loc1.lat);
        const dLng = toRad(loc2.lng - loc1.lng);
        const a =
          Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(toRad(loc1.lat)) *
            Math.cos(toRad(loc2.lat)) *
            Math.sin(dLng / 2) *
            Math.sin(dLng / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // 거리(km)
      }

      let markers = []; // 마커와 관련된 데이터를 저장할 배열

function displayGyms(gyms) {
  const gymList = document.getElementById('gym-list');
  gymList.innerHTML = gyms
    .map((gym, index) => {
      const name = gym.name || 'No name available';
      const vicinity = gym.vicinity || 'No location available';
      const rating = gym.rating
        ? `<p>Rating: ${gym.rating} ⭐</p>`
        : '<p>No rating available</p>';
      const distance = gym.distance
        ? `<p>Distance: ${gym.distance.toFixed(2)} km</p>`
        : '';

      // 카드 HTML 생성
      return `
        <div class="gym-card" data-index="${index}">
          <h2>${name}</h2>
          <p>${vicinity}</p>
          ${rating}
          ${distance}
        </div>
      `;
    })
    .join('');

  // 각 카드에 클릭 이벤트 추가
  document.querySelectorAll('.gym-card').forEach((card) => {
    card.addEventListener('click', (event) => {
      const index = event.currentTarget.getAttribute('data-index');
      if (markers[index]) {
        const { marker, infoWindow } = markers[index];
        map.setCenter(marker.getPosition()); // 해당 마커 위치로 이동
        map.setZoom(16); // 지도 확대
        infoWindow.open(map, marker); // 상세 정보 창 열기
      }
    });
  });
}


function addMarkersToMap(gyms) {
  gyms.forEach((gym, index) => {
    if (!gym.geometry || !gym.geometry.location) return;

    const marker = new google.maps.Marker({
      position: {
        lat: gym.geometry.location.lat,
        lng: gym.geometry.location.lng,
      },
      map: map,
      title: gym.name || '이름 없음',
    });

    const infoWindow = new google.maps.InfoWindow({
      content: `
        <div style="max-width: 250px; font-family: Arial, sans-serif; line-height: 1.5;">
          <h2 style="font-size: 1rem; margin: 0 0 0.5rem; color: #007bff;">${
            gym.name || '이름 없음'
          }</h2>
          <p style="margin: 0 0 0.5rem; color: #555;">${
            gym.vicinity || '주소 없음'
          }</p>
          ${
            gym.rating
              ? `<p style="margin: 0; color: #444;">평점: <strong>${gym.rating} ⭐</strong></p>`
              : '<p style="margin: 0; color: #999;">평점 없음</p>'
          }
          ${
            gym.photoUrl
              ? `<img src="${gym.photoUrl}" alt="헬스장 사진" style="width: 100%; margin-top: 10px; border-radius: 8px;" />`
              : '<p style="margin: 0; color: #999;">사진 없음</p>'
          }
          ${
            gym.distance
              ? `<p style="margin: 0; color: #666;">거리: ${gym.distance.toFixed(
                  2
                )} km</p>`
              : ''
          }
        </div>
      `,
    });

    // 마커 클릭 이벤트 추가
    marker.addListener('click', () => {
      infoWindow.open(map, marker);
    });

    // 마커와 infoWindow를 배열에 저장
    markers[index] = { marker, infoWindow };
  });
}


    </script>
  </body>
</html>
