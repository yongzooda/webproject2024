<main>
  <style>
    /* 채팅 페이지 스타일 */
    .chat-room {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 2rem; /* 상단바와의 간격 감소 */
      padding: 1rem;
      width: 100%;
      max-width: 800px;
      background-color: #f0f4fa; /* 배경색 변경 */
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .chat-room header {
      width: 100%;
      text-align: center;
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 1rem;
      color: #333;
      background-color: #007bff; /* 헤더 색 변경 */
      color: white; /* 텍스트 색 변경 */
      padding: 1rem;
      border-radius: 10px 10px 0 0;
    }

    .chat-box {
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      padding: 20px;
      background-color: #ffffff; /* 채팅창 배경색 */
      height: 600px; /* 높이 확대 */
      width: 100%;
      border: 1px solid #ccc;
      border-radius: 10px;
      margin-bottom: 1rem;
      box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .message {
      margin: 5px 10px;
      padding: 10px;
      max-width: 70%;
      word-wrap: break-word;
      border-radius: 10px;
    }

    .message.user {
      align-self: flex-end;
      background-color: #d1f7c4; /* 메시지 배경 변경 */
      color: black;
      text-align: right;
    }

    .message.other {
      align-self: flex-start;
      background-color: #f1f1f1;
      color: black;
      text-align: left;
    }

    .message-timestamp {
      font-size: 0.9rem;
      color: #666;
      margin-top: 5px;
      text-align: right;
    }

    .chat-input {
      display: flex;
      gap: 10px;
      padding: 10px;
      border-top: 1px solid #ddd;
      width: 100%;
      box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
    }

    .chat-input input {
      flex: 1;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1rem;
    }

    .chat-input button {
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
    }

    .chat-input button:hover {
      background-color: #0056b3;
    }
  </style>

  <div class="chat-room">
    <header>
      Chat with <%= chatRoom.participants.find((p) => p !== user.username) %>
    </header>
    <div class="chat-box" id="chat-box">
      <% chatRoom.messages.forEach((msg) => { %>
      <div
        class="message <%= msg.sender === user.username ? 'user' : 'other' %>"
      >
        <strong
          ><%= msg.sender === user.username ? 'You' : msg.sender %>:</strong
        >
        <%= msg.message %>
        <div class="message-timestamp">
          <%= new Date(msg.timestamp).toLocaleTimeString() %>
        </div>
      </div>
      <% }); %>
    </div>
    <form id="chat-form" class="chat-input">
      <input
        type="text"
        id="message-input"
        placeholder="Type your message..."
        required
      />
      <button type="submit">Send</button>
    </form>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io({
      auth: {
        token: '<%= token %>', // EJS에서 서버에서 생성한 JWT를 삽입
      },
    });

    const roomId = '<%= chatRoom.roomId %>'; // 방 ID
    const username = '<%= user.username %>'; // 사용자 이름
    const chatBox = document.getElementById('chat-box');
    const messageInput = document.getElementById('message-input');

    // 방 참여
    socket.emit('join room', { roomId, username });

    // 스크롤을 맨 아래로 이동하는 함수
    const scrollToBottom = () => {
      chatBox.scrollTop = chatBox.scrollHeight;
    };

    // 페이지 로드 후 스크롤을 가장 아래로 이동
    window.onload = scrollToBottom;

    // 메시지 전송
    document.getElementById('chat-form').addEventListener('submit', (e) => {
      e.preventDefault();
      const message = messageInput.value.trim();
      if (message) {
        socket.emit('chat message', {
          roomId,
          sender: username, // 현재 사용자 이름
          message,
        });
        messageInput.value = ''; // 입력창 초기화
      }
    });

    // 새 메시지 수신
    socket.on('chat message', ({ sender, message }) => {
      console.log('Message received on client:', { sender, message });
      const messageElement = document.createElement('div');
      messageElement.className =
        sender === username ? 'message user' : 'message other';
      messageElement.innerHTML = `<strong>${
        sender === username ? 'You' : sender
      }:</strong> ${message}`;
      chatBox.appendChild(messageElement);
      scrollToBottom(); // 스크롤 아래로 이동
    });
  </script>
</main>
